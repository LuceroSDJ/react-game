{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleCards","sort","Math","random","map","id","useEffect","console","log","prevCards","resetTurn","setTimeout","prevTurns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAEe,SAASA,EAAT,GAAgE,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAY9D,OACI,qBAAKC,UAAU,OAAf,SACI,sBAAKA,UAAWF,EAAU,UAAY,GAAtC,UACE,qBAAKE,UAAU,QAAQC,IAAKL,EAAKK,IAAKC,IAAI,eAC1C,qBACEF,UAAU,OACVC,IAAI,qBACJE,QAfQ,WACZJ,GAEAF,EAAaD,IAaTM,IAAI,mB,UChBdE,EAAa,CACjB,CAAC,IAAO,sBAAuBC,SAAS,GACxC,CAAC,IAAO,iBAAkBA,SAAS,GACnC,CAAC,IAAO,sBAAuBA,SAAS,GACxC,CAAC,IAAO,sBAAuBA,SAAS,GACxC,CAAC,IAAO,sBAAuBA,SAAS,GACxC,CAAC,IAAO,2BAA4BA,SAAS,IAyGhCC,MArGf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOR,EAAP,KAAiBiB,EAAjB,KAQMC,EAAe,WACnB,IAAMA,EAAe,UAAIb,EAAeA,GAErCc,MAAK,kBAAMC,KAAKC,SAAW,MAE3BC,KAAI,SAACzB,GAAD,mBAAC,eAAeA,GAAhB,IAAsB0B,GAAIH,KAAKC,cAEtCP,EAAa,MACbE,EAAa,MACbN,EAASQ,GACTN,EAAS,IAILd,EAAe,SAACD,GACpBgB,EAAYG,EAAanB,GAAQiB,EAAajB,IAGhD2B,qBAAU,WACLX,GAAaE,IACdE,GAAY,GACTJ,EAAUX,MAAQa,EAAUb,KAC7BuB,QAAQC,IAAI,aAGZhB,GAAS,SAAAiB,GACP,OAAOA,EAAUL,KAAI,SAAAzB,GACnB,OAAGA,EAAKK,MAAQW,EAAUX,IACjB,2BAAIL,GAAX,IAAiBS,SAAS,IAEnBT,QAIb+B,MAEAH,QAAQC,IAAI,YACZG,YAAW,kBAAMD,MAAa,SAMjC,CAACf,EAAWE,IAEfU,QAAQC,IAAIjB,GAGZ,IAAMmB,EAAY,WAChBd,EAAa,MACbE,EAAa,MACbJ,GAAS,SAAAkB,GAAS,OAAIA,EAAY,KAClCb,GAAY,IAQd,OAJAO,qBAAU,WACRN,MACC,IAGD,sBAAKjB,UAAU,MAAf,UACE,6CACA,wBAAQG,QAASc,EAAjB,sBAEA,qBAAKjB,UAAU,YAAf,SACGQ,EAAMa,KAAI,SAAAzB,GAAI,OACb,cAAC,EAAD,CAEEA,KAAMA,EACNC,aAAcA,EAEdC,QAASF,IAASgB,GAAahB,IAASkB,GAAalB,EAAKS,QAC1DN,SAAUA,GALLH,EAAK0B,SAUhB,wCAAWZ,SCvGjBoB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6555ac52.chunk.js","sourcesContent":["import './SingleCard.css';\n\nexport default function SingleCard({ card, handleChoice, flipped, disabled }) {\n\n    // this function updates state in the app component\n    //by triggering handleChoice defined in parent component\n    const handleClick = () => { \n        if(!disabled) {\n            //pass the parameter in this child component up to its parent\n            handleChoice(card);\n        }    \n    }\n\n\n    return (\n        <div className='card'>\n            <div className={flipped ? 'flipped' : ''}>\n              <img className='front' src={card.src} alt='card front' />\n              <img \n                className='back' \n                src='/img/cover90s.jpeg' \n                onClick={handleClick}\n                alt='card back' \n            />\n            </div>\n        </div>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport SingleCard from './components/SingleCard';\nimport './App.css'\n\n//array created outside of the component bc it's a constant. It won't change.\n//this way the cards array won't be re-created every time the component gets re-evaluated\nconst cardImages = [\n  {'src': '/img/brickPhone.png', matched: false},\n  {'src': '/img/caset.png', matched: false},\n  {'src': '/img/floppyDisk.png', matched: false},\n  {'src': '/img/gamePlayer.png', matched: false},\n  {'src': '/img/tamagotchi.png', matched: false},\n  {'src': '/img/videoGamePlayer.png', matched: false}\n\n]\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  //choiceOne/Two will be used to compare them\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n\n\n  //shuffle card:\n  //duplicate each card\n  //randomize the order of the cards using the sort()\n  //apply random id to each card\n  const shuffleCards = () => {\n    const shuffleCards = [...cardImages, ...cardImages]\n      //if we return a # < 0, the order of the 2 items stays the same, else if # > 0, items' order is swaped \n      .sort(() => Math.random() - 0.5)\n      //next, we want to fire a function for each item inside the new sorted array to add an id\n      .map((card) => ({ ...card, id: Math.random() }))\n\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffleCards);\n    setTurns(0);\n  }\n\n\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  }\n\n  useEffect(() => {\n    if(choiceOne && choiceTwo) {\n      setDisabled(true);\n      if(choiceOne.src === choiceTwo.src) {\n        console.log('yes match');\n\n        //keep track of which cards have been matched\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if(card.src === choiceOne.src) {\n              return {...card, matched: true}\n            } else {\n              return card\n            }\n          })\n        })\n        resetTurn();\n      } else {\n        console.log('no match');\n        setTimeout(() => resetTurn(), 1000)      \n      }\n    }\n    // return () => {\n    //   cleanup\n    // }\n  }, [choiceOne, choiceTwo])\n\n  console.log(cards);\n\n  //reset choices and increase turn\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n    setDisabled(false);\n  }\n\n  //automatically start the game right after the 1st render \n  useEffect(() => {\n    shuffleCards();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n      <button onClick={shuffleCards}>New Game</button>\n\n      <div className='card-grid'>\n        {cards.map(card => (\n          <SingleCard \n            key={card.id} \n            card={card} \n            handleChoice={handleChoice}\n            // there are 3 scenarios in which a card should be flipped \n            flipped={card === choiceOne || card === choiceTwo || card.matched}\n            disabled={disabled}\n          />\n        ))}\n      </div>\n\n      <p>Turns: {turns}</p>\n      \n\n    </div>\n    \n\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}